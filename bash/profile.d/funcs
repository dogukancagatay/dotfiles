# ------------------------------------------------------------ #
# exports the functions in this file 
# ------------------------------------------------------------ #
function export-functions() {
    export -f bench
    export -f genpasswd
    export -f git_diff
    export -f extract
    export -f hbase-shell
    export -f get-filename
    export -f locateip
    export -f compress-bz2
    export -f swap
    export -f findit
    export -f aria2c-multi
    export -f compress-gz
    export -f shorten-url
    export -f resource
    export -f youtube-dl-aria2

    if [ $(uname -s) = "Darwin" ]; then
        export -f ssh-copy-id
        export -f rtmp_open
        export -f macports_cleanup
    fi
}

# ------------------------------------------------------------ #
# simple bench
# taken from bitbucket.org/TigersWay
# ------------------------------------------------------------ #
function bench() {
    if [ $(uname -s) = "Linux" ]; then
        cpu=$( awk -F': +' '/model name/ {name=$2} END {print name}' /proc/cpuinfo )
        cores=$( awk '/cpu MHz/ {cores++} END {print cores}' /proc/cpuinfo )
        freq=$( awk -F': +' '/cpu MHz/ {freq=$2} END {print freq}' /proc/cpuinfo )
        echo "  CPU Model : $cpu"
        echo "      Cores : $cores"
        echo "  Frequency : $freq MHz"

        ram=$( free -m | awk 'NR==2 {print $2}' )
        swap=$( free -m | awk 'NR==4 {print $2}' )
        echo "        Ram : $ram MB"
        echo "       Swap : $swap MB"

        echo "           ---"

        #io=$( ( dd if=/dev/zero of=test_$$ bs=64k count=16k conv=fdatasync && rm -f test_$$ ) 2>&1 | awk -F', ' '{io=$NF} END {print io}' )
        writeio=$( ( dd if=/dev/zero of=test_$$ bs=64k count=16k conv=fdatasync && sync ) 2>&1 | awk -F', ' '{io=$NF} END {print io}' )
        readio=$( ( dd if=test_$$ of=/dev/null bs=64k count=16k && sync && rm -f test_$$ ) 2>&1 | awk -F', ' '{io=$NF} END {print io}' )
        cachefly=$( wget -O /dev/null http://cachefly.cachefly.net/100mb.test 2>&1 | awk '/\/dev\/null/ {speed=$3 " " $4} END {gsub(/\(|\)/,"",speed); print speed}' )
        up=$( uptime | awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; gsub(/^ +|, *$/,""); print}' )
        echo "     Uptime : $up"
        echo "  I/O write speed : $writeio"
        echo "  I/O read speed : $readio"
        echo "   CacheFly : $cachefly "
    fi

    if [ $(uname -s) = "Darwin" ]; then
        cpu=$( system_profiler SPHardwareDataType | grep -i "processor name" | awk '{print $3" "$4" "$5}' )
        cores=$( system_profiler SPHardwareDataType | grep -i "total number of cores" | awk '{print $5}' )
        freq=$( system_profiler SPHardwareDataType | grep -i "processor speed" | awk '{print $3" "$4}' )
        macmodel=$( system_profiler SPHardwareDataType | grep -i "model identifier" | awk '{print $3}' )
        echo "  Mac Model : $macmodel"
        echo "  CPU Model : $cpu"
        echo "      Cores : $cores"
        echo "  Frequency : $freq"

        ram=$( system_profiler SPHardwareDataType | grep -i "memory" | awk '{print $2" "$3}' )
        echo "        Ram : $ram"
        echo "           ---"

        writeio=$( ( dd if=/dev/zero of=test_$$ bs=64k count=16k ) 2>&1 | awk -F', ' '{io=$NF} END {print io}' )
        readio=$( ( dd if=test_$$ of=/dev/null bs=64k count=16k && rm -rf test_$$ ) 2>&1 | awk -F', ' '{io=$NF} END {print io}' )
        cachefly=$( wget -O /dev/null http://cachefly.cachefly.net/10mb.test 2>&1 | awk '/\/dev\/null/ {speed=$3 " " $4} END {gsub(/\(|\)/,"",speed); print speed}' )
        up=$( uptime | awk '{ $1=$2=$(NF-6)=$(NF-5)=$(NF-4)=$(NF-3)=$(NF-2)=$(NF-1)=$NF=""; gsub(/^ +|, *$/,""); print}' )
        echo "     Uptime : $up"
        echo "  I/O write speed : $writeio"
        echo "  I/O read speed : $readio"
        echo "   CacheFly : $cachefly "
    fi
}

# ------------------------------------------------------------ #
# random password generator
# taken from (http://bash.cyberciti.biz/guide/~/.bashrc)
# ------------------------------------------------------------ #
function genpasswd() { 
    local l=""
    local type="A-Za-z0-9_*?.\)\(\!\%\&\$\#\@-"
    #if [[ "$#" -eq "1" ]]; then
    for var in "$@"
    do
        if [[  -z "`echo $var | tr -d "[:digit:]"`" ]]; then
            l=$var
        else
            case "$var" in
            "lower" | "low")
                type="a-z0-9_*?.\)\(\!\%\&\$\#\@-"
                ;;
            "lownum")
                type="a-z0-9"
                ;;
            "num")
                type="0-9"
                ;;
            "uplow")
                type="A-Za-z0-9"
                ;;
            "-h" | "--help")
                echo "Usage: genpasswd [arg1] [arg2]"
                echo "------------------------------"
                echo "arg1 and arg2 are optional and interchangeable. Default length=16 type=all"
                echo ""
                echo "a number : the length of the generated password"
                echo "low      : lowercase alpha-numeric password with special characters."
                echo "lownum   : lowercase alpha-numeric password."
                echo "uplow    : uppercase and lowercase alpha-numeric password."
                echo "num      : numeric password."
                echo "all | *  : uppercase, lowercase alpha-numeric password with special characters."
                l=0
                ;;
            *)
                type="A-Za-z0-9_*?.\)\(\!\%\&\$\#\@-"
                ;;
            esac
        fi
   done 

    [ "$l" == "" ] && l=16
    #tr -dc A-Za-z0-9_*?.\)\(\!\%\&\$\#\@- < /dev/urandom | head -c ${l} | xargs 
    tr -dc ${type} < /dev/urandom | head -c ${l} | xargs 
} 

# ------------------------------------------------------------ #
# ssh-copy-id for macs
# ------------------------------------------------------------ #
if [ $(uname -s) = "Darwin" ]; then
    function ssh-copy-id() {
        if [ $# -eq 1 ]; then
            if [ -f ~/.ssh/id_rsa.pub ]; then
                cat ~/.ssh/id_rsa.pub | ssh $1 "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
            fi

            if [ -f ~/.ssh/id_dsa.pub ]; then
                cat ~/.ssh/id_dsa.pub | ssh $1 "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
            fi
        fi
    }
fi

# ------------------------------------------------------------ #
# plain git diff on vim
# ------------------------------------------------------------ #
function git_diff() {
  git diff -w "$@" | vim -R -
}

# ------------------------------------------------------------ #
# easy extract 
# ------------------------------------------------------------ #

function extract() {
    if [ -z "$1" ]; then
    # display usage if no parameters given
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    else
        if [ -f $1 ] ; then
            case $1 in
                *.tar.bz2)	tar xvjf $1 && cd $(basename "$1" .tar.bz2) ;;
                *.tar.gz)	tar xvzf $1 && cd $(basename "$1" .tar.gz) ;;
                *.tar.xz)	tar Jxvf $1 && cd $(basename "$1" .tar.xz) ;;
                *.bz2)		bunzip2 $1 && cd $(basename "$1" /bz2) ;;
                *.rar)		unrar x $1 && cd $(basename "$1" .rar) ;;
                *.gz)		gunzip $1 && cd $(basename "$1" .gz) ;;
                *.tar)		tar xvf $1 && cd $(basename "$1" .tar) ;;
                *.tbz2)		tar xvjf $1 && cd $(basename "$1" .tbz2) ;;
                *.tgz)		tar xvzf $1 && cd $(basename "$1" .tgz) ;;
                *.zip)		unzip $1 && cd $(basename "$1" .zip) ;;
                *.Z)		uncompress $1 && cd $(basename "$1" .Z) ;;
                *.7z)		7z x $1 && cd $(basename "$1" .7z) ;;
                *.xz)       unxz $1  && cd $(basename "$1" .xz) ;;
                *)		echo "don't know how to extract '$1'..." ;;
            esac
       else
           echo "'$1' is not a valid file!"
       fi
   fi
}

# ------------------------------------------------------------ #
# open hbase-shell
# ------------------------------------------------------------ #
function hbase-shell() {
    if [ -f ~/programs/hbase/bin/hbase ]; then
        ~/programs/hbase/bin/hbase shell
    fi
}

# ------------------------------------------------------------ #
# location of given ip address on earth
# ------------------------------------------------------------ #
function locateip() {
    echo "http://www.geobytes.com/IpLocator.htm?GetLocation&IpAddress=$1"
    if [ $(uname -s) = "Darwin" ]; then
        open "http://www.geobytes.com/IpLocator.htm?GetLocation&IpAddress=$1"
    fi
}

if [ $(uname -s) = "Darwin" ]; then
# ------------------------------------------------------------ #
# open rtmp stream with rtmpdump and vlc
# ------------------------------------------------------------ #
    function rtmp_open() {
        rtmpdump -r $1 --quiet | /Applications/VLC.app/Contents/MacOS/VLC fd://0 --playlist-autostart
    }

# ------------------------------------------------------------ #
# MacPorts functions 
# ------------------------------------------------------------ #
    function macports_cleanup() {
        sudo port uninstall leaves
        sudo port uninstall inactive
    }

fi #finish mac specific part

# ------------------------------------------------------------ #
# resource ~/.bashrc
# ------------------------------------------------------------ #
function resource() {
    source ~/.bashrc
}

# ------------------------------------------------------------ #
# youtube-dl download with aria2
# ------------------------------------------------------------ #
function youtube-dl-aria2() {
    ydata="$(youtube-dl --get-filename --get-url "$@")"
    filename="$(echo "$ydata" | tail -n 1)"
    url="$(echo "$ydata" | head -n 1)"
    aria2c --out "$filename" "$url"
}

# ------------------------------------------------------------ #
# Google URL Shortener http://goo.gl/xwCNC
# ------------------------------------------------------------ #
function shorten-url() {
    if [ "$1"  == "-i" ]; then
        if [[ -f "$2" ]]; then
            for f in $(cat "$2")
            do
                curl -s https://www.googleapis.com/urlshortener/v1/url -H 'Content-Type: application/json' -d "{\"longUrl\": \"$f\"}" | grep id | awk -F\" '{print $4}'
            done
        fi
    else
        curl -s https://www.googleapis.com/urlshortener/v1/url -H 'Content-Type: application/json' -d "{\"longUrl\": \"$1\"}" | grep id | awk -F\" '{print $4}'
    fi
}

# ------------------------------------------------------------ #
# Gzip compressing function
# ------------------------------------------------------------ #
function compress-gz() {
    local filename="$(basename "$1")".tar.gz

    if [ -d "$1" ]; then
        tar czf "$filename" "$1"
    else
        echo "No such directory."
    fi
}

# ------------------------------------------------------------ #
# Bzip2 compressing function
# ------------------------------------------------------------ #
function compress-bz2() {
    local filename="$(basename "$1")".tar.bz2

    if [ -d "$1" ]; then
        tar cjf "$filename" "$1"
    else
        echo "No such directory."
    fi
}

# ------------------------------------------------------------ #
# Swap 2 filenames around, if they exist (from Uzi's bashrc)
# ------------------------------------------------------------ #
function swap() {
    local TMPFILE=tmp.$$

    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1

    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# ------------------------------------------------------------ #
# Find a file with pattern in name
# ------------------------------------------------------------ #
function findit() {
   if [ -z ${1} ];then
      echo "Please pass an argument that you want to search for"
   else
      find . -iname "*$1*" -print
   fi
}

# ------------------------------------------------------------ #
# Download multiple links with aria2 by simply pasting links 
# ------------------------------------------------------------ #
function aria2c-multi() {
    local OUT="$(mktemp)"
    vim -c 'startinsert' "$OUT"
    $(which aria2c) -i "$OUT"
    rm -rf "$OUT"
}

# ------------------------------------------------------------ #
# cut the extension from the file path 
# ------------------------------------------------------------ #
function get-filename() {
    local file="$1"
    echo "${file%.*}"
}

# ------------------------------------------------------------ #
# Change video/audio encoding and hardcode subtitles with ffmpeg 
# ------------------------------------------------------------ #
function ff(){
    ## Settings ###
    #
    VIDEO_CODEC="libx264"
    AUDIO_CODEC="libfdk_aac"

    #finished_dir="$HOME/down/finished"
    #finished_dir="$HOME/down/finished"
    # 
    #
    ################

    #filename=$(basename "$1")
    fullpath="$1"
    filename="${fullpath##*/}" # Strip longest match of */ from start
    #filename="${filename%.*}"
    dir="${fullpath:0:${#fullpath} - ${#filename}}"
    extension="${filename##*.}"
    filename="${filename%.*}"

    #echo "filename = $filename"
    #echo "extension = $extension"
    #echo "dir = $dir"

    #ffmpeg -i aaa.mp4 -filter_complex subtitles=aaa.srt -vcodec libx264 -acodec aac -ac 2 -strict experimental aaa_sub.mp4

    # -vcodec libx264 -acodec aac -ac 2 -strict experimental aaa_sub.mp4"

    command="-i $fullpath"

    #echo -n "Cheking if subtitle exists..."
    if [ -e "$dir""$filename".srt ]; then
        #echo "yes"
        command="$command"" -filter_complex subtitles=$dir$filename".srt
        command="$command"" -vcodec $VIDEO_CODEC -acodec $AUDIO_CODEC -ac 2 -strict experimental"
        command="$command"" $dir""$filename""_sub".mp4
    else
        #echo "no"
        command="$command"" -vcodec $VIDEO_CODEC -acodec $AUDIO_CODEC -ac 2 -strict experimental"
        command="$command"" $dir""$filename".mp4
    fi

    echo "ffmpeg $command"
}

# ------------------------------------------------------------ #
# Change text file encoding to UTF-8 
# ------------------------------------------------------------ #
function fromLatin1ToUtf8(){
    #iconv -f iso-8859-1 -t UTF-8 "$1" > "$1".utf8; mv -f "$1".utf8 "$1"
    for ARG in "$@"
    do
        iconv -f iso-8859-1 -t UTF-8 "$ARG" > "$ARG".utf8; mv -f "$ARG".utf8 "$ARG"
    done
}

# ------------------------------------------------------------ #
# Change new lines to from dos to unix type 
# ------------------------------------------------------------ #
function fromDosToUnix(){
    for ARG in "$@"
    do
        dos2unix "$ARG"
    done
}
 

function human_print(){
    while read B dummy; do
        [ $B -lt 1024 ] && echo ${B} bytes && break
        KB=$(((B+512)/1024))
        [ $KB -lt 1024 ] && echo ${KB} kilobytes && break
        MB=$(((KB+512)/1024))
        [ $MB -lt 1024 ] && echo ${MB} megabytes && break
        GB=$(((MB+512)/1024))
        [ $GB -lt 1024 ] && echo ${GB} gigabytes && break
        echo $(((GB+512)/1024)) terabytes
    done
}
